"""
PDF Export Service for IntelliCV Platform

This service provides professional PDF generation and export functionality
for AI-generated content, resumes, cover letters, and job descriptions.

Features:
- Professional PDF formatting with branding
- Support for multiple content types
- Bullet points and formatting preservation
- Downloadable PDF files with proper MIME types
- Batch PDF export capability
- Custom styling and templates

Author: IntelliCV Development Team
Date: October 28, 2025
Version: 1.0.0

Dependencies:
    pip install reportlab==4.0.7
"""

import io
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak,
    Table, TableStyle, Image, KeepTogether
)
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfgen import canvas
from pathlib import Path


class PDFExportService:
    """PDF export service for IntelliCV content"""
    
    def __init__(self):
        """Initialize PDF export service"""
        self.page_width, self.page_height = A4
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom PDF styles for IntelliCV branding"""
        
        # Title style
        self.styles.add(ParagraphStyle(
            name='IntelliCVTitle',
            parent=self.styles['Title'],
            fontSize=24,
            textColor=colors.HexColor('#1a1a2e'),
            spaceAfter=12,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='IntelliCVSubtitle',
            parent=self.styles['Normal'],
            fontSize=14,
            textColor=colors.HexColor('#16213e'),
            spaceAfter=20,
            alignment=TA_CENTER,
            fontName='Helvetica-Oblique'
        ))
        
        # Heading style
        self.styles.add(ParagraphStyle(
            name='IntelliCVHeading',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=colors.HexColor('#0f3460'),
            spaceAfter=12,
            spaceBefore=12,
            fontName='Helvetica-Bold',
            borderWidth=0,
            borderColor=colors.HexColor('#e94560'),
            borderPadding=5,
            leftIndent=0
        ))
        
        # Subheading style
        self.styles.add(ParagraphStyle(
            name='IntelliCVSubheading',
            parent=self.styles['Heading2'],
            fontSize=13,
            textColor=colors.HexColor('#16213e'),
            spaceAfter=8,
            spaceBefore=8,
            fontName='Helvetica-Bold'
        ))
        
        # Body text style
        self.styles.add(ParagraphStyle(
            name='IntelliCVBody',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.HexColor('#1a1a2e'),
            spaceAfter=8,
            alignment=TA_JUSTIFY,
            fontName='Helvetica',
            leading=14
        ))
        
        # Bullet point style
        self.styles.add(ParagraphStyle(
            name='IntelliCVBullet',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.HexColor('#1a1a2e'),
            leftIndent=20,
            spaceAfter=6,
            fontName='Helvetica',
            bulletIndent=10,
            leading=14
        ))
        
        # Footer style
        self.styles.add(ParagraphStyle(
            name='IntelliCVFooter',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=colors.gray,
            alignment=TA_CENTER,
            fontName='Helvetica-Oblique'
        ))
    
    def _add_header_footer(self, canvas_obj, doc):
        """Add header and footer to PDF pages"""
        canvas_obj.saveState()
        
        # Header
        canvas_obj.setFont('Helvetica-Bold', 10)
        canvas_obj.setFillColor(colors.HexColor('#0f3460'))
        canvas_obj.drawString(inch, self.page_height - 0.5*inch, "IntelliCV")
        
        # Footer
        canvas_obj.setFont('Helvetica', 8)
        canvas_obj.setFillColor(colors.gray)
        footer_text = f"Generated by IntelliCV on {datetime.now().strftime('%B %d, %Y')}"
        canvas_obj.drawCentredString(
            self.page_width / 2,
            0.5 * inch,
            footer_text
        )
        
        # Page number
        page_num = canvas_obj.getPageNumber()
        canvas_obj.drawRightString(
            self.page_width - inch,
            0.5 * inch,
            f"Page {page_num}"
        )
        
        canvas_obj.restoreState()
    
    def _process_text_formatting(self, text: str) -> str:
        """
        Process text to preserve formatting for PDF
        
        Args:
            text: Raw text with markdown-style formatting
        
        Returns:
            HTML-formatted text for ReportLab
        """
        # Replace markdown bold with HTML
        text = text.replace('**', '<b>').replace('**', '</b>')
        
        # Replace markdown italic with HTML
        text = text.replace('*', '<i>').replace('*', '</i>')
        
        # Preserve line breaks
        text = text.replace('\n', '<br/>')
        
        return text
    
    def create_professional_summary_pdf(
        self,
        summary_text: str,
        user_name: str = "User",
        job_title: str = ""
    ) -> io.BytesIO:
        """
        Create PDF for professional summary
        
        Args:
            summary_text: The professional summary text
            user_name: User's name
            job_title: Target job title
        
        Returns:
            BytesIO object containing PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )
        
        story = []
        
        # Title
        title = Paragraph("Professional Summary", self.styles['IntelliCVTitle'])
        story.append(title)
        
        # Subtitle with user info
        subtitle_text = f"{user_name}"
        if job_title:
            subtitle_text += f" | {job_title}"
        subtitle = Paragraph(subtitle_text, self.styles['IntelliCVSubtitle'])
        story.append(subtitle)
        
        story.append(Spacer(1, 0.3*inch))
        
        # Summary content
        summary = Paragraph(
            self._process_text_formatting(summary_text),
            self.styles['IntelliCVBody']
        )
        story.append(summary)
        
        # Build PDF
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        
        buffer.seek(0)
        return buffer
    
    def create_bullet_points_pdf(
        self,
        bullet_points: List[str],
        title: str = "Achievement Highlights",
        user_name: str = "User"
    ) -> io.BytesIO:
        """
        Create PDF for bullet points (STAR format, achievements, etc.)
        
        Args:
            bullet_points: List of bullet point strings
            title: Document title
            user_name: User's name
        
        Returns:
            BytesIO object containing PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )
        
        story = []
        
        # Title
        title_para = Paragraph(title, self.styles['IntelliCVTitle'])
        story.append(title_para)
        
        # Subtitle
        subtitle = Paragraph(user_name, self.styles['IntelliCVSubtitle'])
        story.append(subtitle)
        
        story.append(Spacer(1, 0.3*inch))
        
        # Bullet points
        for point in bullet_points:
            bullet = Paragraph(
                f"â€¢ {self._process_text_formatting(point)}",
                self.styles['IntelliCVBullet']
            )
            story.append(bullet)
        
        # Build PDF
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        
        buffer.seek(0)
        return buffer
    
    def create_cover_letter_pdf(
        self,
        cover_letter_text: str,
        applicant_name: str = "Applicant",
        company_name: str = "",
        job_title: str = ""
    ) -> io.BytesIO:
        """
        Create PDF for cover letter
        
        Args:
            cover_letter_text: The cover letter content
            applicant_name: Applicant's name
            company_name: Target company name
            job_title: Target job title
        
        Returns:
            BytesIO object containing PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )
        
        story = []
        
        # Title
        title = Paragraph("Cover Letter", self.styles['IntelliCVTitle'])
        story.append(title)
        
        # Application details
        details = f"{applicant_name}"
        if job_title:
            details += f" | {job_title}"
        if company_name:
            details += f" at {company_name}"
        
        subtitle = Paragraph(details, self.styles['IntelliCVSubtitle'])
        story.append(subtitle)
        
        story.append(Spacer(1, 0.3*inch))
        
        # Cover letter content (split by paragraphs)
        paragraphs = cover_letter_text.split('\n\n')
        for para_text in paragraphs:
            if para_text.strip():
                para = Paragraph(
                    self._process_text_formatting(para_text),
                    self.styles['IntelliCVBody']
                )
                story.append(para)
                story.append(Spacer(1, 0.15*inch))
        
        # Build PDF
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        
        buffer.seek(0)
        return buffer
    
    def create_job_description_pdf(
        self,
        job_title: str,
        job_description: str,
        company_name: str = "",
        requirements: Optional[List[str]] = None,
        responsibilities: Optional[List[str]] = None
    ) -> io.BytesIO:
        """
        Create PDF for job description
        
        Args:
            job_title: Job title
            job_description: Full job description text
            company_name: Company name
            requirements: List of requirements
            responsibilities: List of responsibilities
        
        Returns:
            BytesIO object containing PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )
        
        story = []
        
        # Title
        title = Paragraph(job_title, self.styles['IntelliCVTitle'])
        story.append(title)
        
        # Company name
        if company_name:
            subtitle = Paragraph(company_name, self.styles['IntelliCVSubtitle'])
            story.append(subtitle)
        
        story.append(Spacer(1, 0.3*inch))
        
        # Job description
        if job_description:
            heading = Paragraph("Job Description", self.styles['IntelliCVHeading'])
            story.append(heading)
            
            desc = Paragraph(
                self._process_text_formatting(job_description),
                self.styles['IntelliCVBody']
            )
            story.append(desc)
            story.append(Spacer(1, 0.2*inch))
        
        # Responsibilities
        if responsibilities:
            heading = Paragraph("Key Responsibilities", self.styles['IntelliCVHeading'])
            story.append(heading)
            
            for resp in responsibilities:
                bullet = Paragraph(
                    f"â€¢ {self._process_text_formatting(resp)}",
                    self.styles['IntelliCVBullet']
                )
                story.append(bullet)
            
            story.append(Spacer(1, 0.2*inch))
        
        # Requirements
        if requirements:
            heading = Paragraph("Requirements", self.styles['IntelliCVHeading'])
            story.append(heading)
            
            for req in requirements:
                bullet = Paragraph(
                    f"â€¢ {self._process_text_formatting(req)}",
                    self.styles['IntelliCVBullet']
                )
                story.append(bullet)
        
        # Build PDF
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        
        buffer.seek(0)
        return buffer
    
    def create_multi_content_pdf(
        self,
        contents: List[Dict],
        document_title: str = "IntelliCV Generated Content"
    ) -> io.BytesIO:
        """
        Create PDF with multiple content sections
        
        Args:
            contents: List of content dicts with keys:
                - type: 'summary', 'bullets', 'cover_letter', 'job_description'
                - title: Section title
                - content: Content text or list
            document_title: Overall document title
        
        Returns:
            BytesIO object containing PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )
        
        story = []
        
        # Main title
        title = Paragraph(document_title, self.styles['IntelliCVTitle'])
        story.append(title)
        story.append(Spacer(1, 0.5*inch))
        
        # Process each content section
        for i, content_data in enumerate(contents):
            content_type = content_data.get('type', 'text')
            section_title = content_data.get('title', 'Section')
            content = content_data.get('content', '')
            
            # Section heading
            heading = Paragraph(section_title, self.styles['IntelliCVHeading'])
            story.append(heading)
            
            # Content based on type
            if content_type == 'bullets' and isinstance(content, list):
                for point in content:
                    bullet = Paragraph(
                        f"â€¢ {self._process_text_formatting(point)}",
                        self.styles['IntelliCVBullet']
                    )
                    story.append(bullet)
            else:
                # Text content
                para = Paragraph(
                    self._process_text_formatting(str(content)),
                    self.styles['IntelliCVBody']
                )
                story.append(para)
            
            # Add space between sections
            if i < len(contents) - 1:
                story.append(Spacer(1, 0.3*inch))
        
        # Build PDF
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        
        buffer.seek(0)
        return buffer


# Singleton instance
_pdf_service = None


def get_pdf_service() -> PDFExportService:
    """
    Get PDF service singleton instance
    
    Returns:
        PDFExportService instance
    """
    global _pdf_service
    if _pdf_service is None:
        _pdf_service = PDFExportService()
    return _pdf_service


# Example usage
if __name__ == "__main__":
    # This is for testing only
    service = get_pdf_service()
    
    # Test professional summary
    summary = "Experienced software engineer with 10+ years of expertise in Python, cloud architecture, and team leadership."
    pdf_buffer = service.create_professional_summary_pdf(
        summary,
        user_name="John Doe",
        job_title="Senior Software Engineer"
    )
    
    # Save to file
    with open("test_summary.pdf", "wb") as f:
        f.write(pdf_buffer.getvalue())
    
    print("Test PDF created: test_summary.pdf")
