[pytest]
# Pytest Configuration for IntelliCV Dynamic Intelligence System

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add current directory to Python path
pythonpath = . shared_backend

# Test output options
addopts = 
    -v
    --strict-markers
    --tb=short
    --cov=shared_backend
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-branch
    -p no:warnings

# Markers for categorizing tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests across multiple components
    slow: Tests that take significant time to run
    fast: Quick tests for rapid feedback
    registry: Tests for intelligence type registry
    inference: Tests for inference engine
    portal: Tests for portal bridge
    discovery: Tests for type discovery system
    performance: Performance and benchmark tests

# Test coverage options
[coverage:run]
source = shared_backend
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env310/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

# Test directories
testpaths = tests

# Timeout for tests (in seconds)
timeout = 300

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Benchmark configuration
[tool:pytest-benchmark]
min_rounds = 5
timer = time.perf_counter
